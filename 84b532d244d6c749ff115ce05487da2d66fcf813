{
  "comments": [
    {
      "key": {
        "uuid": "0fd16582_8a3433c2",
        "filename": "openecomp-be/lib/openecomp-tosca-converter-lib/openecomp-tosca-converter-core/src/test/java/org/openecomp/core/impl/ToscaSolConverterPnfMultipleNodeTemplatesTest.java",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 2119
      },
      "writtenOn": "2019-04-08T12:49:15Z",
      "side": 1,
      "message": "Sonar remark\n\nLambdas should be replaced with method references\n \nCode smell\n \nMinor\nsquid:S1612\n \nMethod/constructor references are more compact and readable than using lambdas, and are therefore preferred. Similarly, null checks can be replaced with references to the Objects::isNull and Objects::nonNull methods.\nNote that this rule is automatically disabled when the project\u0027s sonar.java.source is lower than 8.\nNoncompliant Code Example\n  class A {    void process(List\u003cA\u003e list) {      list.stream()        .map(a -\u003e a.\u003cString\u003egetObject())        .forEach(a -\u003e { System.out.println(a); });    }      \u003cT\u003e T getObject() {      return null;    }  }  \nCompliant Solution\n  class A {    void process(List\u003cA\u003e list) {      list.stream()        .map(A::\u003cString\u003egetObject)        .forEach(System.out::println);    }      \u003cT\u003e T getObject() {      return null;    }  }  ",
      "revId": "84b532d244d6c749ff115ce05487da2d66fcf813",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "47a6b8d4_bb1f5f61",
        "filename": "openecomp-be/lib/openecomp-tosca-converter-lib/openecomp-tosca-converter-core/src/test/java/org/openecomp/core/impl/ToscaSolConverterPnfMultipleNodeTemplatesTest.java",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 4799
      },
      "writtenOn": "2019-04-08T16:36:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0fd16582_8a3433c2",
      "revId": "84b532d244d6c749ff115ce05487da2d66fcf813",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4efb729b_f0aeabc8",
        "filename": "openecomp-be/lib/openecomp-tosca-converter-lib/openecomp-tosca-converter-core/src/test/java/org/openecomp/core/impl/ToscaSolConverterPnfMultipleNodeTemplatesTest.java",
        "patchSetId": 2
      },
      "lineNbr": 62,
      "author": {
        "id": 2119
      },
      "writtenOn": "2019-04-08T12:49:15Z",
      "side": 1,
      "message": "Input stream should be protected with try with resource block.",
      "revId": "84b532d244d6c749ff115ce05487da2d66fcf813",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "67152eca_07c6ae77",
        "filename": "openecomp-be/lib/openecomp-tosca-converter-lib/openecomp-tosca-converter-core/src/test/java/org/openecomp/core/impl/ToscaSolConverterPnfMultipleNodeTemplatesTest.java",
        "patchSetId": 2
      },
      "lineNbr": 62,
      "author": {
        "id": 4799
      },
      "writtenOn": "2019-04-08T16:36:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4efb729b_f0aeabc8",
      "revId": "84b532d244d6c749ff115ce05487da2d66fcf813",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "406ddf15_bb3f5e48",
        "filename": "openecomp-be/lib/openecomp-tosca-converter-lib/openecomp-tosca-converter-core/src/test/java/org/openecomp/core/impl/ToscaSolConverterPnfTest.java",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 2119
      },
      "writtenOn": "2019-04-08T12:49:15Z",
      "side": 1,
      "message": "Please use sonar before making git review.",
      "revId": "84b532d244d6c749ff115ce05487da2d66fcf813",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "18ccf7d5_c266f269",
        "filename": "openecomp-be/lib/openecomp-tosca-converter-lib/openecomp-tosca-converter-core/src/test/java/org/openecomp/core/impl/ToscaSolConverterPnfTest.java",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 4799
      },
      "writtenOn": "2019-04-08T16:36:03Z",
      "side": 1,
      "message": "Ran Sonar on the code, however test classes were ignored while running sonarlint in intellij. Have you configured sonarqube in intellij to include test classes? How was this configured?",
      "parentUuid": "406ddf15_bb3f5e48",
      "revId": "84b532d244d6c749ff115ce05487da2d66fcf813",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d92b3b84_60717589",
        "filename": "openecomp-be/lib/openecomp-tosca-converter-lib/openecomp-tosca-converter-core/src/test/java/org/openecomp/core/impl/ToscaSolConverterPnfTest.java",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 2119
      },
      "writtenOn": "2019-04-08T12:49:15Z",
      "side": 1,
      "message": "Resources should be closed\n \nBug\n \nBlocker\nsquid:S2095\n \nConnections, streams, files, and other classes that implement the Closeable interface or its super-interface, AutoCloseable, needs to be closed after use. Further, that close call must be made in a finally block otherwise an exception could keep the call from being made. Preferably, when class implements AutoCloseable, resource should be created using \"try-with-resources\" pattern and will be closed automatically.\nFailure to properly close resources will result in a resource leak which could bring first the application and then perhaps the box it\u0027s on to their knees.\nNoncompliant Code Example\n  private void readTheFile() throws IOException {    Path path \u003d Paths.get(this.fileName);    BufferedReader reader \u003d Files.newBufferedReader(path, this.charset);    // ...    reader.close(); // Noncompliant    // ...    Files.lines(\"input.txt\").forEach(System.out::println); // Noncompliant: The stream needs to be closed  }    private void doSomething() {    OutputStream stream \u003d null;    try {      for (String property : propertyList) {        stream \u003d new FileOutputStream(\"myfile.txt\"); // Noncompliant        // ...      }    } catch (Exception e) {      // ...    } finally {      stream.close(); // Multiple streams were opened. Only the last is closed.    }  }  \nCompliant Solution\n  private void readTheFile(String fileName) throws IOException {      Path path \u003d Paths.get(fileName);      try (BufferedReader reader \u003d Files.newBufferedReader(path, StandardCharsets.UTF_8)) {        reader.readLine();        // ...      }      // ..      try (Stream\u003cString\u003e input \u003d Files.lines(\"input.txt\")) {        input.forEach(System.out::println);      }  }    private void doSomething() {    OutputStream stream \u003d null;    try {      stream \u003d new FileOutputStream(\"myfile.txt\");      for (String property : propertyList) {        // ...      }    } catch (Exception e) {      // ...    } finally {      stream.close();    }  }  \nExceptions\nInstances of the following classes are ignored by this rule because close has no effect:\njava.io.ByteArrayOutputStream\njava.io.ByteArrayInputStream\njava.io.CharArrayReader\njava.io.CharArrayWriter\njava.io.StringReader\njava.io.StringWriter\nJava 7 introduced the try-with-resources statement, which implicitly closes Closeables. All resources opened in a try-with-resources statement are ignored by this rule.\n  try (BufferedReader br \u003d new BufferedReader(new FileReader(fileName))) {    //...  }  catch ( ... ) {    //...  }  \nSee\nMITRE, CWE-459 - Incomplete Cleanup\nCERT, FIO04-J. - Release resources when they are no longer needed\nCERT, FIO42-C. - Close files when they are no longer needed\nTry With Resources",
      "revId": "84b532d244d6c749ff115ce05487da2d66fcf813",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "187de488_28d5537d",
        "filename": "openecomp-be/lib/openecomp-tosca-converter-lib/openecomp-tosca-converter-core/src/test/java/org/openecomp/core/impl/ToscaSolConverterPnfTest.java",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 4799
      },
      "writtenOn": "2019-04-08T16:36:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d92b3b84_60717589",
      "revId": "84b532d244d6c749ff115ce05487da2d66fcf813",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d485b915_099042e4",
        "filename": "openecomp-be/lib/openecomp-tosca-converter-lib/openecomp-tosca-converter-core/src/test/java/org/openecomp/core/impl/ToscaSolConverterPnfTest.java",
        "patchSetId": 2
      },
      "lineNbr": 92,
      "author": {
        "id": 2119
      },
      "writtenOn": "2019-04-08T12:49:15Z",
      "side": 1,
      "message": "\"throws\" declarations should not be superfluous\n \nCode smell\n \nMinor\nsquid:RedundantThrowsDeclarationCheck\n \nAn exception in a throws declaration in Java is superfluous if it is:\nlisted multiple times\na subclass of another listed exception\na RuntimeException, or one of its descendants\ncompletely unnecessary because the declared exception type cannot actually be thrown\nNoncompliant Code Example\n  void foo() throws MyException, MyException {} // Noncompliant; should be listed once  void bar() throws Throwable, Exception {} // Noncompliant; Exception is a subclass of Throwable  void baz() throws RuntimeException {} // Noncompliant; RuntimeException can always be thrown  \nCompliant Solution\n  void foo() throws MyException {}  void bar() throws Throwable {}  void baz() {}  \nExceptions\nThe rule will not raise any issue for exceptions that cannot be thrown from the method body:\nin overriding and implementation methods\nin interface default methods\nin non-private methods that only throw, have empty bodies, or a single return statement .\nin overridable methods (non-final, or not member of a final class, non-static, non-private), if the exception is documented with a proper javadoc.\n  class A extends B {    @Override    void doSomething() throws IOException {      compute(a);    }      public void foo() throws IOException {}      protected void bar() throws IOException {      throw new UnsupportedOperationException(\"This method should be implemented in subclasses\");    }      Object foobar(String s) throws IOException {      return null;    }      /**     * @throws IOException Overriding classes may throw this exception if they print values into a file     */    protected void print() throws IOException { // no issue, method is overridable and the exception has proper javadoc      System.out.println(\"foo\");    }  }  ",
      "revId": "84b532d244d6c749ff115ce05487da2d66fcf813",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a341de20_4de9de83",
        "filename": "openecomp-be/lib/openecomp-tosca-converter-lib/openecomp-tosca-converter-core/src/test/java/org/openecomp/core/impl/ToscaSolConverterPnfTest.java",
        "patchSetId": 2
      },
      "lineNbr": 92,
      "author": {
        "id": 4799
      },
      "writtenOn": "2019-04-08T16:36:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d485b915_099042e4",
      "revId": "84b532d244d6c749ff115ce05487da2d66fcf813",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3dfeb126_43747a5a",
        "filename": "openecomp-be/lib/openecomp-tosca-converter-lib/openecomp-tosca-converter-core/src/test/java/org/openecomp/core/impl/ToscaSolConverterPnfTest.java",
        "patchSetId": 2
      },
      "lineNbr": 102,
      "author": {
        "id": 2119
      },
      "writtenOn": "2019-04-08T12:49:15Z",
      "side": 1,
      "message": "Should be with try resource block",
      "revId": "84b532d244d6c749ff115ce05487da2d66fcf813",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c17b0a9_c30bc6be",
        "filename": "openecomp-be/lib/openecomp-tosca-converter-lib/openecomp-tosca-converter-core/src/test/java/org/openecomp/core/impl/ToscaSolConverterPnfTest.java",
        "patchSetId": 2
      },
      "lineNbr": 102,
      "author": {
        "id": 4799
      },
      "writtenOn": "2019-04-08T16:36:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3dfeb126_43747a5a",
      "revId": "84b532d244d6c749ff115ce05487da2d66fcf813",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    }
  ]
}