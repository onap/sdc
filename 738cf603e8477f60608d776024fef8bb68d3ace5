{
  "comments": [
    {
      "key": {
        "uuid": "d22c0727_8401b7b7",
        "filename": "openecomp-be/lib/openecomp-sdc-vendor-software-product-lib/openecomp-sdc-vendor-software-product-core/src/test/java/org/openecomp/sdc/vendorsoftwareproduct/dao/impl/ComponentDaoFactoryImplTest.java",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 6614
      },
      "writtenOn": "2020-05-01T18:53:01Z",
      "side": 1,
      "message": "I\u0027m sorry to ask, but what is the purpose of this test? The `createInterface` function returns an implementation of `ComponentDao`. No matter the implementation returned, it should stick to `ComponentDao`\u0027s inherent contract. therefore, from the caller perspective, it should not matter which implementation is chosen. What do you think?",
      "revId": "738cf603e8477f60608d776024fef8bb68d3ace5",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a24a9d82_55b182e1",
        "filename": "openecomp-be/lib/openecomp-sdc-vendor-software-product-lib/openecomp-sdc-vendor-software-product-core/src/test/java/org/openecomp/sdc/vendorsoftwareproduct/dao/impl/ComponentDaoFactoryImplTest.java",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 5562
      },
      "writtenOn": "2020-05-01T19:55:30Z",
      "side": 1,
      "message": "Testing concrete implementation of ComponentDao.\nAgree, not much to test, implemented simplest way, open for suggestion.",
      "parentUuid": "d22c0727_8401b7b7",
      "revId": "738cf603e8477f60608d776024fef8bb68d3ace5",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe84859f_5ba51a9a",
        "filename": "openecomp-be/lib/openecomp-sdc-vendor-software-product-lib/openecomp-sdc-vendor-software-product-core/src/test/java/org/openecomp/sdc/vendorsoftwareproduct/dao/impl/ComponentDaoFactoryImplTest.java",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 6614
      },
      "writtenOn": "2020-05-01T20:28:59Z",
      "side": 1,
      "message": "I would instead not add this test, as overall, it mainly adds more code to maintain without providing much benefit. However it would be interesting to have a test for ComponentDaoZusammenImpl. This may have to be done in a different change though.\n\nOverall, I avoid testing implementation details and favor API/Interface details. So anything that needs to be exposed must be tested, the implementations details do not need that. In order to ensure that all the implementations of an interface satisfy its contract, a contract-test has to be created.\n\nConcretely, this is done using an abstract class. I put an example here: https://gist.github.com/FrancisToth/14ab5620910787c9318dd90ac1fea351\n\nThe idea is to create a contract used to test all the common properties of the interface against each implementation.",
      "parentUuid": "a24a9d82_55b182e1",
      "revId": "738cf603e8477f60608d776024fef8bb68d3ace5",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0a53490_842e0e69",
        "filename": "openecomp-be/lib/openecomp-sdc-vendor-software-product-lib/openecomp-sdc-vendor-software-product-core/src/test/java/org/openecomp/sdc/vendorsoftwareproduct/dao/impl/ComponentDaoFactoryImplTest.java",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 5562
      },
      "writtenOn": "2020-05-02T11:23:13Z",
      "side": 1,
      "message": "Agree we should create create \"contract-test\" for ComponentDaoZusammenImpl and others, but this is out of scope for this change.\nHowever, cannot agree for this TC, just for testing getInstance() and createInterface(), I think, it good enough, without any additional complexity. From caller perspective, I except to get ComponentDaoZusammenImpl and not any other implementation of interface when I call ComponentDaoFactoryImpl, right? What do you think?",
      "parentUuid": "fe84859f_5ba51a9a",
      "revId": "738cf603e8477f60608d776024fef8bb68d3ace5",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a26e91ec_886f8e64",
        "filename": "openecomp-be/lib/openecomp-sdc-vendor-software-product-lib/openecomp-sdc-vendor-software-product-core/src/test/java/org/openecomp/sdc/vendorsoftwareproduct/dao/impl/ComponentDaoFactoryImplTest.java",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 6614
      },
      "writtenOn": "2020-05-02T12:38:05Z",
      "side": 1,
      "message": "I think this goes back to test an implementation detail which is not considered as a best practice. This is well documented as shown by googling \"test against interface not implementation\".\n\nIf the goal is to ensure that the caller gets always a ComponentDaoZusammenImpl back then I would rather return one than a `VersionableDao`. As if this is only possible implementation, then what is the point of having an interface in the first place?\n```\npublic class ComponentDaoFactoryImpl extends ComponentDaoFactory {\n  private static final ComponentDaoZusammenImpl INSTANCE \u003d new ComponentDaoZusammenImpl(\n      ZusammenAdaptorFactory.getInstance().createInterface());\n\n  @Override\n  public ComponentDaoZusammenImpl createInterface() {\n    return INSTANCE;\n  }\n}\n\n//...\n@Test\nvoid createInterface() {\n\t\n  final ComponentDaoZusammenImpl testSubject \u003d ComponentDaoFactoryImpl.getInstance().createInterface();\n  assertNotNull(testSubject);\n  assertSame(ComponentDaoZusammenImpl.class, testSubject.getClass());\n}\n```\nBut in that case, the test does not make sense anymore. You\u0027d be guaranteed to get a `ComponentDaoFactoryImpl` whenever `createInterface` is called by the type system itself. \n\nSecondly, as it test an implementation detail, this test would have to be modified whenever we decide to return another kind of implementation. So it would increase the efforts required to introduce a new change for no real benefit. In other words, adding a test is still adding some code which at some point will have to be maintained.\n\nAlso, this breaks the encapsulation of the `ComponentDaoFactoryImpl` class, as it exposes its internal aspects. Encapsulation as you probably know is also a fundamental object oriented principle.",
      "parentUuid": "a0a53490_842e0e69",
      "revId": "738cf603e8477f60608d776024fef8bb68d3ace5",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": true
    }
  ]
}