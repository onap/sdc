/*-
 * ============LICENSE_START=======================================================
 * SDC
 * ================================================================================
 * Copyright (C) 2017 AT&T Intellectual Property. All rights reserved.
 * ================================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============LICENSE_END=========================================================
 */

package org.openecomp.sdc.ci.tests.execute.general;

import static org.testng.AssertJUnit.assertEquals;
import static org.testng.AssertJUnit.assertTrue;

import java.io.IOException;
import java.util.List;
import java.util.UUID;

import org.junit.Rule;
import org.junit.rules.TestName;
import org.openecomp.sdc.ci.tests.api.ComponentBaseTest;
import org.openecomp.sdc.ci.tests.config.Config;
import org.openecomp.sdc.ci.tests.datatypes.http.RestResponse;
import org.openecomp.sdc.ci.tests.utils.rest.CatalogRestUtils;
import org.openecomp.sdc.ci.tests.utils.rest.ResourceRestUtils;
import org.openecomp.sdc.common.api.Constants;
import org.testng.AssertJUnit;
import org.testng.annotations.Test;

public class UuidTest extends ComponentBaseTest {

	@Rule
	public static TestName name = new TestName();

	public UuidTest() {
		super(name, UuidTest.class.getName());
		config = Config.instance();
	}

	@Test
	public void testE2EUuidHeaderReturnedAndPreserved() throws IOException {
		UUID randomUUID = UUID.randomUUID();
		String uuidStr = randomUUID.toString();
		RestResponse allTagsTowardsCatalogFe = CatalogRestUtils.getAllCategoriesTowardsCatalogFeWithUuid(uuidStr);
		AssertJUnit.assertEquals(allTagsTowardsCatalogFe.getErrorCode(), new Integer(200));
		List<String> list = allTagsTowardsCatalogFe.getHeaderFields().get(Constants.X_ECOMP_REQUEST_ID_HEADER);
		// check that header is returned
		AssertJUnit.assertTrue(list != null && !list.isEmpty());
		String receivedUuid = list.get(0);
		// Check that same uuid returned
		AssertJUnit.assertEquals(uuidStr, receivedUuid);
	}

	@Test
	public void testUuidHeaderGeneratedBe() throws IOException {
		RestResponse allTagsTowardsCatalogBe = CatalogRestUtils.getAllCategoriesTowardsCatalogBe();
		List<String> list = allTagsTowardsCatalogBe.getHeaderFields().get(Constants.X_ECOMP_REQUEST_ID_HEADER);
		// check that response was OK
		assertEquals(allTagsTowardsCatalogBe.getErrorCode(), new Integer(200));
		// check that header is returned
		assertTrue(list != null && !list.isEmpty());
		String uuid = list.get(0);
		// Check there is no conversion error
		UUID.fromString(uuid);
	}

	@Test
	public void testE2EOptionsNoUuid() throws IOException {
		RestResponse allTagsTowardsCatalogFe = ResourceRestUtils.sendOptionsTowardsCatalogFeWithUuid();
		assertEquals(allTagsTowardsCatalogFe.getErrorCode(), new Integer(200));
		List<String> list = allTagsTowardsCatalogFe.getHeaderFields().get(Constants.X_ECOMP_REQUEST_ID_HEADER);
		// check that header is returned (generated by BE)
		assertTrue(list != null && !list.isEmpty());
		String receivedUuid = list.get(0);
		// Check there is no conversion error
		UUID.fromString(receivedUuid);
	}

	@Test
	public void testE2EMethodNotAllowedWithUuid() throws IOException {
		UUID randomUUID = UUID.randomUUID();
		String uuidStr = randomUUID.toString();
		RestResponse allTagsTowardsCatalogFe = ResourceRestUtils
				.putAllCategoriesTowardsCatalogFeWithUuidNotAllowed(uuidStr);
		assertEquals(allTagsTowardsCatalogFe.getErrorCode(), new Integer(405));
		List<String> list = allTagsTowardsCatalogFe.getHeaderFields().get(Constants.X_ECOMP_REQUEST_ID_HEADER);
		// check that header is returned (generated by BE)
		assertTrue(list != null && !list.isEmpty());
		String receivedUuid = list.get(0);
		// Check that same uuid returned
		assertEquals(uuidStr, receivedUuid);
	}
}
