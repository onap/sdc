{
  "comments": [
    {
      "key": {
        "uuid": "8095ec81_b82f97cc",
        "filename": "openecomp-be/api/openecomp-sdc-rest-webapp/vendor-software-products-rest/vendor-software-products-rest-services/src/test/java/org/openecomp/sdcrests/vsp/rest/services/OrchestrationTemplateCandidateImplTest.java",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 2119
      },
      "writtenOn": "2019-04-02T06:17:02Z",
      "side": 1,
      "message": "sonar\n\nGeneric exceptions should never be thrown\n \nCode smell\n \nMajor\nsquid:S00112\n \nUsing such generic exceptions as Error, RuntimeException, Throwable, and Exception prevents calling methods from handling true, system-generated exceptions differently than application-generated errors.\nNoncompliant Code Example\n  public void foo(String bar) throws Throwable { // Noncompliant    throw new RuntimeException(\"My Message\"); // Noncompliant  }  \nCompliant Solution\n  public void foo(String bar) {    throw new MyOwnRuntimeException(\"My Message\");  }  \nExceptions\nGeneric exceptions in the signatures of overriding methods are ignored, because overriding method has to follow signature of the throw declaration in the superclass. The issue will be raised on superclass declaration of the method (or won\u0027t be raised at all if superclass is not part of the analysis).\n  @Override  public void myMethod() throws Exception {...}  \nGeneric exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.\n  public void myOtherMethod throws Exception {    doTheThing(); // this method throws Exception  }  \nSee\nMITRE, CWE-397 - Declaration of Throws for Generic Exception\nCERT, ERR07-J. - Do not throw RuntimeException, Exception, or Throwable",
      "revId": "68e64f8618aa5209f7a311e21480ee516c8dae50",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0ef7b773_7c8d22cd",
        "filename": "openecomp-be/api/openecomp-sdc-rest-webapp/vendor-software-products-rest/vendor-software-products-rest-services/src/test/java/org/openecomp/sdcrests/vsp/rest/services/OrchestrationTemplateCandidateImplTest.java",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 4813
      },
      "writtenOn": "2019-04-02T09:23:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8095ec81_b82f97cc",
      "revId": "68e64f8618aa5209f7a311e21480ee516c8dae50",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5e1b049a_1cc49572",
        "filename": "openecomp-be/backend/openecomp-sdc-vendor-software-product-manager/pom.xml",
        "patchSetId": 2
      },
      "lineNbr": 209,
      "author": {
        "id": 2119
      },
      "writtenOn": "2019-04-02T06:17:02Z",
      "side": 1,
      "message": "Please use constant for this",
      "revId": "68e64f8618aa5209f7a311e21480ee516c8dae50",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ddc2d9f_85b17aa5",
        "filename": "openecomp-be/backend/openecomp-sdc-vendor-software-product-manager/pom.xml",
        "patchSetId": 2
      },
      "lineNbr": 209,
      "author": {
        "id": 4813
      },
      "writtenOn": "2019-04-02T09:23:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5e1b049a_1cc49572",
      "revId": "68e64f8618aa5209f7a311e21480ee516c8dae50",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e125e598_aec17de7",
        "filename": "openecomp-be/backend/openecomp-sdc-vendor-software-product-manager/src/test/java/org/openecomp/sdc/vendorsoftwareproduct/security/SecurityManagerTest.java",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 2119
      },
      "writtenOn": "2019-04-02T06:17:02Z",
      "side": 1,
      "message": "Sonar Blocker!\n\nResources should be closed\n \nBug\n \nBlocker\nsquid:S2095\n \nConnections, streams, files, and other classes that implement the Closeable interface or its super-interface, AutoCloseable, needs to be closed after use. Further, that close call must be made in a finally block otherwise an exception could keep the call from being made. Preferably, when class implements AutoCloseable, resource should be created using \"try-with-resources\" pattern and will be closed automatically.\nFailure to properly close resources will result in a resource leak which could bring first the application and then perhaps the box it\u0027s on to their knees.\nNoncompliant Code Example\n  private void readTheFile() throws IOException {    Path path \u003d Paths.get(this.fileName);    BufferedReader reader \u003d Files.newBufferedReader(path, this.charset);    // ...    reader.close(); // Noncompliant    // ...    Files.lines(\"input.txt\").forEach(System.out::println); // Noncompliant: The stream needs to be closed  }    private void doSomething() {    OutputStream stream \u003d null;    try {      for (String property : propertyList) {        stream \u003d new FileOutputStream(\"myfile.txt\"); // Noncompliant        // ...      }    } catch (Exception e) {      // ...    } finally {      stream.close(); // Multiple streams were opened. Only the last is closed.    }  }  \nCompliant Solution\n  private void readTheFile(String fileName) throws IOException {      Path path \u003d Paths.get(fileName);      try (BufferedReader reader \u003d Files.newBufferedReader(path, StandardCharsets.UTF_8)) {        reader.readLine();        // ...      }      // ..      try (Stream\u003cString\u003e input \u003d Files.lines(\"input.txt\")) {        input.forEach(System.out::println);      }  }    private void doSomething() {    OutputStream stream \u003d null;    try {      stream \u003d new FileOutputStream(\"myfile.txt\");      for (String property : propertyList) {        // ...      }    } catch (Exception e) {      // ...    } finally {      stream.close();    }  }  \nExceptions\nInstances of the following classes are ignored by this rule because close has no effect:\njava.io.ByteArrayOutputStream\njava.io.ByteArrayInputStream\njava.io.CharArrayReader\njava.io.CharArrayWriter\njava.io.StringReader\njava.io.StringWriter\nJava 7 introduced the try-with-resources statement, which implicitly closes Closeables. All resources opened in a try-with-resources statement are ignored by this rule.\n  try (BufferedReader br \u003d new BufferedReader(new FileReader(fileName))) {    //...  }  catch ( ... ) {    //...  }  \nSee\nMITRE, CWE-459 - Incomplete Cleanup\nCERT, FIO04-J. - Release resources when they are no longer needed\nCERT, FIO42-C. - Close files when they are no longer needed\nTry With Resources",
      "revId": "68e64f8618aa5209f7a311e21480ee516c8dae50",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "31bb2c19_d1de5cfa",
        "filename": "openecomp-be/backend/openecomp-sdc-vendor-software-product-manager/src/test/java/org/openecomp/sdc/vendorsoftwareproduct/security/SecurityManagerTest.java",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 4813
      },
      "writtenOn": "2019-04-02T09:23:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e125e598_aec17de7",
      "revId": "68e64f8618aa5209f7a311e21480ee516c8dae50",
      "serverId": "14b4e41f-c4e3-4fb9-9955-6a9b5656895a",
      "unresolved": false
    }
  ]
}