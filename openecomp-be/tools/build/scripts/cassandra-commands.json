{
  "create": {
    "version": "CREATE TYPE IF NOT EXISTS version (major int, minor int)",
    "user_candidate_version": "CREATE TYPE IF NOT EXISTS user_candidate_version (version frozen<version>, user text)",
    "version_info": "CREATE TABLE IF NOT EXISTS version_info (entity_type text, entity_id text, active_version frozen<version>, status text, candidate frozen<user_candidate_version>, viewable_versions set<frozen<version>>, latest_final_version frozen<version>, PRIMARY KEY (entity_type, entity_id))",
    "version_info_deleted": "CREATE TABLE IF NOT EXISTS version_info_deleted (entity_type text, entity_id text, active_version frozen<version>, status text, candidate frozen<user_candidate_version>, viewable_versions set<frozen<version>>, latest_final_version frozen<version>, PRIMARY KEY (entity_type, entity_id))",
    "unique_value" : "CREATE TABLE IF NOT EXISTS unique_value (type text, value text, PRIMARY KEY ((type, value)))",
    "choice_or_other": "CREATE TYPE IF NOT EXISTS choice_or_other (result text)",
    "multi_choice_or_other": "CREATE TYPE IF NOT EXISTS multi_choice_or_other (results set<text>)",
    "vendor_license_model": "CREATE TABLE IF NOT EXISTS vendor_license_model (vlm_id text, version frozen<version>, vendor_name text, description text, icon text, PRIMARY KEY ((vlm_id, version)))",
    "license_agreement": "CREATE TABLE IF NOT EXISTS license_agreement (vlm_id text, version frozen<version>, la_id text, name text, description text, lic_term frozen<choice_or_other>, req_const text, fg_ids set<text>, PRIMARY KEY ((vlm_id, version), la_id))",
    "feature_group": "CREATE TABLE IF NOT EXISTS feature_group (vlm_id text, version frozen<version>, fg_id text, name text, description text, part_num text, ep_ids set<text>, lkg_ids set<text>, ref_la_ids set<text>, PRIMARY KEY ((vlm_id, version), fg_id))",
    "license_key_group": "CREATE TABLE IF NOT EXISTS license_key_group (vlm_id text, version frozen<version>, lkg_id text,name text,description text, type text, operational_scope frozen<multi_choice_or_other>, ref_fg_ids set<text>, version_uuid text, PRIMARY KEY ((vlm_id, version), lkg_id))",
    "entitlement_pool": "CREATE TABLE IF NOT EXISTS entitlement_pool (vlm_id text, version frozen<version>, ep_id text,name text,description text,threshold float,threshold_unit text,entitlement_metric frozen<choice_or_other>,increments text,aggregation_func frozen<choice_or_other>, operational_scope frozen<multi_choice_or_other>, time frozen<choice_or_other>,manufacturer_ref_num text,ref_fg_ids set<text>, version_uuid text, PRIMARY KEY ((vlm_id, version), ep_id))",
    "vsp_information": "CREATE TABLE IF NOT EXISTS vsp_information (VSP_ID text, version frozen<version>, NAME text,DESCRIPTION text,CATEGORY text,SUB_CATEGORY text,ICON text,PACKAGE_NAME text,PACKAGE_VERSION text,vendor_name text, vendor_id text,LICENSE_AGREEMENT text,FEATURE_GROUPS list<text>,VALIDATION_DATA text,CONTENT_DATA blob, questionnaire_data text, vlm_version frozen<version>, is_old_version text, PRIMARY KEY ((VSP_ID, version)))",
    "package_details": "CREATE TABLE IF NOT EXISTS package_details (VSP_ID text, version frozen<version>,DISPLAY_NAME text,vsp_name text,vsp_description text,VENDOR_NAME text,CATEGORY text,SUB_CATEGORY text,VENDOR_RELEASE text,PACKAGE_CHECKSUM text,PACKAGE_TYPE text,TRANSLATE_CONTENT blob,PRIMARY KEY ((VSP_ID, version)))",
    "vsp_network": "CREATE TABLE IF NOT EXISTS vsp_network (vsp_id text, version frozen<version>, network_id text, composition_data text, questionnaire_data text, PRIMARY KEY ((vsp_id, version), network_id))",
    "vsp_component": "CREATE TABLE IF NOT EXISTS vsp_component (vsp_id text, version frozen<version>, component_id text, composition_data text, questionnaire_data text, PRIMARY KEY ((vsp_id, version), component_id))",
    "vsp_component_nic": "CREATE TABLE IF NOT EXISTS vsp_component_nic (vsp_id text, version frozen<version>, component_id text, nic_id text, composition_data text, questionnaire_data text, PRIMARY KEY ((vsp_id, version), component_id, nic_id))",
    "vsp_process" : "CREATE TABLE IF NOT EXISTS vsp_process (vsp_id text, version frozen<version>, component_id text, process_id text, name text, description text, type text, artifact_name text, artifact blob, PRIMARY KEY ((vsp_id, version), component_id, process_id))",
    "vsp_service_artifact" : "CREATE TABLE IF NOT EXISTS vsp_service_artifact (vsp_id text, version frozen<version>, name text, content_data blob, PRIMARY KEY ((vsp_id, version), name))",
    "vsp_service_template" : "CREATE TABLE IF NOT EXISTS vsp_service_template (vsp_id text, version frozen<version>, base_name text static, name text, content_data blob, PRIMARY KEY ((vsp_id, version), name))",
    "vsp_enriched_service_template" : "CREATE TABLE IF NOT EXISTS vsp_enriched_service_template (vsp_id text, version frozen<version>, base_name text static, name text, content_data blob, PRIMARY KEY ((vsp_id, version), name))",
    "vsp_enriched_service_artifact" : "CREATE TABLE IF NOT EXISTS vsp_enriched_service_artifact (vsp_id text, version frozen<version>, name text, content_data blob, PRIMARY KEY ((vsp_id, version), name))",
    "application_config" : "CREATE TABLE IF NOT EXISTS application_config (namespace text, key text, value text, PRIMARY KEY (namespace, key))",
    "action" : "CREATE TABLE IF NOT EXISTS dox.Action (actionUUID text, actionInvariantUUID text, version frozen<version>, status text, name text, vendor_list set<text>, category_list set<text>, timestamp timestamp, user text, supportedModels set<text>, supportedComponents set<text>, data text, PRIMARY KEY ((actionInvariantUUID, version)))",
    "supportedComponents_index" : "CREATE INDEX IF NOT EXISTS action_supportedComponents ON dox.Action (supportedComponents)",
    "category_list_index" : "CREATE INDEX IF NOT EXISTS action_category_list ON dox.Action (category_list)",
    "supportedModels_index" : "CREATE INDEX IF NOT EXISTS action_supportedModels ON dox.Action (supportedModels)",
    "vendor_list_index" : "CREATE INDEX IF NOT EXISTS action_vendor_list ON dox.Action (vendor_list)",
    "actionUUID_index" : "CREATE INDEX IF NOT EXISTS action_actionUUID ON dox.Action (actionUUID)",
    "ecomp_component": "CREATE TABLE IF NOT EXISTS dox.ecompcomponent(id text PRIMARY KEY, name text)",
    "vsp_component_artifact": "CREATE TABLE IF NOT EXISTS vsp_component_artifact (vsp_id text, version frozen<version>, component_id text, artifact_type text, artifact_id text, name text, description text, artifact blob,  PRIMARY KEY ((vsp_id, version), component_id, artifact_type, artifact_id))",
    "name_index": "CREATE INDEX IF NOT EXISTS action_name ON dox.Action (name)",
    "action_artifact":"CREATE TABLE IF NOT EXISTS action_artifact(artifactuuid text, effective_version int, artifact blob, PRIMARY KEY(artifactuuid, effective_version)) WITH CLUSTERING ORDER BY (effective_version DESC)",
    "vsp_orchestration_template_candidate" : "CREATE TABLE IF NOT EXISTS vsp_orchestration_template_candidate (vsp_id text, version frozen<version>, files_data_structure text, content_data blob, PRIMARY KEY ((vsp_id, version)))",
    "vsp_component_dependency_model" : "CREATE TABLE IF NOT EXISTS vsp_component_dependency_model (vsp_id text, version frozen<version>, dependency_id text, sourcecomponent_id text, targetcomponent_id text, relation text, PRIMARY KEY ((vsp_id, version), dependency_id))",
    "activity_log" : "CREATE TABLE IF NOT EXISTS activity_log (item_id text, version_id text, activity_id text, type text, user text, timestamp timestamp, success boolean, message text, comment text, PRIMARY KEY (item_id, version_id, activity_id))",
    "migration": "CREATE TABLE IF NOT EXISTS migration (id text, ismigrated boolean, primary key(id))"
  },
  "drop": {
    "version_info": "DROP TABLE IF EXISTS version_info",
    "version_info_deleted": "DROP TABLE IF EXISTS version_info_deleted",
    "unique_value": "DROP TABLE IF EXISTS unique_value",
    "entitlement_pool": "DROP TABLE IF EXISTS entitlement_pool",
    "vendor_license_model": "DROP TABLE IF EXISTS vendor_license_model",
    "license_agreement": "DROP TABLE IF EXISTS license_agreement",
    "feature_group": "DROP TABLE IF EXISTS feature_group",
    "license_key_group": "DROP TABLE IF EXISTS license_key_group",
    "vsp_information": "DROP   TABLE IF EXISTS vsp_information",
    "package_details": "DROP TABLE IF EXISTS package_details",
    "vsp_network": "DROP TABLE IF EXISTS vsp_network",
    "vsp_component": "DROP TABLE IF EXISTS vsp_component",
    "vsp_component_nic": "DROP TABLE IF EXISTS vsp_component_nic",
    "vsp_process":"DROP TABLE IF EXISTS vsp_process",
    "choice_or_other": "DROP TYPE IF EXISTS choice_or_other",
    "multi_choice_or_other": "DROP TYPE IF EXISTS multi_choice_or_other",
    "application_config" : "DROP TABLE IF EXISTS application_config",
    "vsp_service_artifact" :"DROP TABLE IF EXISTS vsp_service_artifact",
    "vsp_service_template" :"DROP TABLE IF EXISTS vsp_service_template",
    "vsp_enriched_service_artifact" :"DROP TABLE IF EXISTS vsp_enriched_service_artifact",
    "vsp_enriched_service_template" :"DROP TABLE IF EXISTS vsp_enriched_service_template",
    "action" : "DROP TABLE IF EXISTS action",
    "supportedComponents_index" : "DROP INDEX IF EXISTS dox.action_supportedComponents",
    "category_list_index" : "DROP INDEX IF EXISTS dox.action_category_list",
    "supportedModels_index" : "DROP INDEX IF EXISTS dox.action_supportedModels",
    "vendor_list_index" : "DROP INDEX IF EXISTS dox.action_vendor_list",
    "actionUUID_index" : "DROP INDEX IF EXISTS dox.action_actionUUID",
    "name_index" : "DROP INDEX IF EXISTS dox.action_name",
    "ecomp_component": "DROP TABLE IF EXISTS dox.ecompcomponent",
    "vsp_component_artifact": "DROP TABLE IF EXISTS dox.vsp_component_artifact",
    "action_artifact":"DROP TABLE IF EXISTS action_artifact",
    "vsp_orchestration_template_candidate":"DROP TABLE IF EXISTS vsp_orchestration_template_candidate",
    "vsp_component_dependency_model":"DROP TABLE IF EXISTS vsp_component_dependency_model",
    "activity_log": "DROP TABLE IF EXISTS activity_log",
    "migration": "DROP TABLE IF EXISTS migration"
  },
  "alter": {
    "vsp_information": "ALTER TABLE vsp_information ADD questionnaire_data text",
    "vsp_information_1": "ALTER TABLE vsp_information ADD vlm_version frozen<version>",
    "vsp_process": "ALTER TABLE vsp_process ADD type text",
    "entitlement_pool": "alter table entitlement_pool ADD version_uuid text",
    "license_key_group": "alter table license_key_group ADD version_uuid text",
    "application_config": "delete from application_config where namespace='vsp.monitoring' and key = 'component.ceilometer'"
  },
  "actions": {
    "truncate_configuration": "truncate configuration"
  }
}
